//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler8.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler8)
- (NSDictionary<NSString*, Handler>*) getSubHandler8 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"MAMapRectIsEmpty::MAMapRectIsEmpty": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectIsEmpty::MAMapRectIsEmpty(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            MAMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = MAMapRectIsEmpty(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"MAStringFromMapPoint::MAStringFromMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAStringFromMapPoint::MAStringFromMapPoint(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            MAMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            NSString* result = MAStringFromMapPoint(point);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"MAStringFromMapSize::MAStringFromMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAStringFromMapSize::MAStringFromMapSize(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* sizeValue = (NSValue*) args[@"size"];
            MAMapSize size;
            if (sizeValue != nil && (NSNull*) sizeValue != [NSNull null]) {
              [sizeValue getValue:&size];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"size不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            NSString* result = MAStringFromMapSize(size);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"MAStringFromMapRect::MAStringFromMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAStringFromMapRect::MAStringFromMapRect(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            MAMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            NSString* result = MAStringFromMapRect(rect);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"MAGetDirectionFromCoords::MAGetDirectionFromCoords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetDirectionFromCoords::MAGetDirectionFromCoords(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* fromCoordValue = (NSValue*) args[@"fromCoord"];
            CLLocationCoordinate2D fromCoord;
            if (fromCoordValue != nil && (NSNull*) fromCoordValue != [NSNull null]) {
              [fromCoordValue getValue:&fromCoord];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"fromCoord不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* toCoordValue = (NSValue*) args[@"toCoord"];
            CLLocationCoordinate2D toCoord;
            if (toCoordValue != nil && (NSNull*) toCoordValue != [NSNull null]) {
              [toCoordValue getValue:&toCoord];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"toCoord不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationDirection result = MAGetDirectionFromCoords(fromCoord, toCoord);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"MAGetDirectionFromPoints::MAGetDirectionFromPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetDirectionFromPoints::MAGetDirectionFromPoints(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* fromPointValue = (NSValue*) args[@"fromPoint"];
            MAMapPoint fromPoint;
            if (fromPointValue != nil && (NSNull*) fromPointValue != [NSNull null]) {
              [fromPointValue getValue:&fromPoint];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"fromPoint不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* toPointValue = (NSValue*) args[@"toPoint"];
            MAMapPoint toPoint;
            if (toPointValue != nil && (NSNull*) toPointValue != [NSNull null]) {
              [toPointValue getValue:&toPoint];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"toPoint不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationDirection result = MAGetDirectionFromPoints(fromPoint, toPoint);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"MAGetDistanceFromPointToLine::MAGetDistanceFromPointToLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetDistanceFromPointToLine::MAGetDistanceFromPointToLine(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            MAMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* lineBeginValue = (NSValue*) args[@"lineBegin"];
            MAMapPoint lineBegin;
            if (lineBeginValue != nil && (NSNull*) lineBeginValue != [NSNull null]) {
              [lineBeginValue getValue:&lineBegin];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"lineBegin不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* lineEndValue = (NSValue*) args[@"lineEnd"];
            MAMapPoint lineEnd;
            if (lineEndValue != nil && (NSNull*) lineEndValue != [NSNull null]) {
              [lineEndValue getValue:&lineEnd];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"lineEnd不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = MAGetDistanceFromPointToLine(point, lineBegin, lineEnd);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"MAPolylineHitTest::MAPolylineHitTest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolylineHitTest::MAPolylineHitTest(%@)", args);
            }
        
            // args
            // list arg struct
            NSArray<NSValue*>* linePointsValueList = (NSArray<NSValue*>*) args[@"linePoints"];
            MAMapPoint linePoints[linePointsValueList.count];
            for (NSUInteger __i__ = 0; __i__ < linePointsValueList.count; __i__++) {
                NSValue* linePointsValue = (NSValue*) [linePointsValueList objectAtIndex:__i__];
                MAMapPoint linePointsItem;
                [linePointsValue getValue:&linePointsItem];
                linePoints[__i__] = linePointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
            // struct arg
            NSValue* tappedPointValue = (NSValue*) args[@"tappedPoint"];
            MAMapPoint tappedPoint;
            if (tappedPointValue != nil && (NSNull*) tappedPointValue != [NSNull null]) {
              [tappedPointValue getValue:&tappedPoint];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"tappedPoint不能为null"]);
              return;
            }
        
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
            // ref
        
        
            // invoke native method
            BOOL result = MAPolylineHitTest(linePoints, count, tappedPoint, lineWidth);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
    };
}

@end
