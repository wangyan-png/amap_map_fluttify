// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class MATraceManager extends NSObject  {
  //region constants
  static const String name__ = 'MATraceManager';

  @override
  final String tag__ = 'amap_map_fluttify';

  
  //endregion

  //region creators
  static Future<MATraceManager> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMATraceManager',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MATraceManager>(__result__);
  }
  
  static Future<List<MATraceManager>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMATraceManager',
      {'length': length, 'init': init}
    );
    return __result_batch__
        .map((it) => AmapMapFluttifyIOSAs<MATraceManager>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(MATraceDelegate delegate) async {
    await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('MATraceDelegate::Callback', kAmapMapFluttifyMethodCodec)
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::MATraceDelegate::traceManager_didTrace_correct_distance_withError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: traceManager_didTrace_correct_distance_withError([\'manager\':${args['manager']}, \'locations\':${args['locations']}, \'tracePoints\':${args['tracePoints']}, \'distance\':${args['distance']}, \'error\':${args['error']}])');
              }
          
              // handle the native call
              delegate?.traceManager_didTrace_correct_distance_withError(AmapMapFluttifyIOSAs(args['manager']), (args['locations'] as List)?.map((it) => AmapMapFluttifyIOSAs<CLLocation>(it))?.toList(), (args['tracePoints'] as List)?.map((it) => AmapMapFluttifyIOSAs<MATracePoint>(it))?.toList(), args['distance'], AmapMapFluttifyIOSAs(args['error']));
              break;
            case 'Callback::MATraceDelegate::mapViewRequireLocationAuth':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: mapViewRequireLocationAuth([\'locationManager\':${args['locationManager']}])');
              }
          
              // handle the native call
              delegate?.mapViewRequireLocationAuth(AmapMapFluttifyIOSAs(args['locationManager']));
              break;
            default:
              throw MissingPluginException('方法${methodCall.method}未实现');
              break;
          }
        } catch (e) {
          debugPrint(e);
          rethrow;
        }
      });
  }
  
  //endregion

  //region methods
  
  static Future<MATraceManager> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MATraceManager::sharedInstance([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::sharedInstance', );
  
  
    // handle native call
  
  
    return AmapMapFluttifyIOSAs<MATraceManager>(__result__);
  }
  
  
  Future<NSOperation> queryProcessedTraceWith_type_processingCallback_finishCallback_failedCallback(List<MATraceLocation> locations, AMapCoordinateType type, void processingCallback(int index, List<MATracePoint> points), void finishCallback(List<MATracePoint> points, double distance), void failedCallback(int errorCode, String errorDesc)) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MATraceManager@$refId::queryProcessedTraceWith([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::queryProcessedTraceWith_type_processingCallback_finishCallback_failedCallback', {"locations": locations, "type": type.toValue(), "__this__": this});
  
  
    // handle native call
    MethodChannel('MAProcessingCallback::Callback@$refId', kAmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::MAProcessingCallback::MAProcessingCallback':
                // print log
                if (fluttifyLogEnabled) {
          
                }
          
                // handle the native call
                if (processingCallback != null) processingCallback(args['index'], (args['points'] as List)?.map((it) => AmapMapFluttifyIOSAs<MATracePoint>(it))?.toList());
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
    MethodChannel('MAFinishCallback::Callback@$refId', kAmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::MAFinishCallback::MAFinishCallback':
                // print log
                if (fluttifyLogEnabled) {
          
                }
          
                // handle the native call
                if (finishCallback != null) finishCallback((args['points'] as List)?.map((it) => AmapMapFluttifyIOSAs<MATracePoint>(it))?.toList(), args['distance']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
    MethodChannel('MAFailedCallback::Callback@$refId', kAmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::MAFailedCallback::MAFailedCallback':
                // print log
                if (fluttifyLogEnabled) {
          
                }
          
                // handle the native call
                if (failedCallback != null) failedCallback(args['errorCode'], args['errorDesc']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return AmapMapFluttifyIOSAs<NSOperation>(__result__);
  }
  
  @deprecated
  Future<void> startTraceWith(void locCallback(List<CLLocation> locations, List<MATracePoint> tracePoints, double distance, NSError error)) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MATraceManager@$refId::startTraceWith([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::startTraceWith', {"__this__": this});
  
  
    // handle native call
    MethodChannel('MATraceLocationCallback::Callback@$refId', kAmapMapFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::MATraceLocationCallback::MATraceLocationCallback':
                // print log
                if (fluttifyLogEnabled) {
          
                }
          
                // handle the native call
                if (locCallback != null) locCallback((args['locations'] as List)?.map((it) => AmapMapFluttifyIOSAs<CLLocation>(it))?.toList(), (args['tracePoints'] as List)?.map((it) => AmapMapFluttifyIOSAs<MATracePoint>(it))?.toList(), args['distance'], AmapMapFluttifyIOSAs(args['error']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  @deprecated
  Future<void> stopTrace() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MATraceManager@$refId::stopTrace([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::stopTrace', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> start() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MATraceManager@$refId::start([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::start', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> stop() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MATraceManager@$refId::stop([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::stop', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'MATraceManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MATraceManager_Batch on List<MATraceManager> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<MATraceManager>> sharedInstance_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::sharedInstance_batch', );
  
  
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<MATraceManager>(__result__)).cast<MATraceManager>().toList();
  }
  
  @deprecated
  Future<List<void>> stopTrace_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::stopTrace_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> start_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::start_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> stop_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MATraceManager::stop_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}